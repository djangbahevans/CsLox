// This is an autogenerated file. Do not change.

using System;
using System.Collections.Generic;

namespace CsLox
{
    internal abstract class Stmt
    {
        public interface IVisitor<T>
        {
            T VisitBlockStmt(Block stmt);
            T VisitExpressionStmt(Expression stmt);
            T VisitFunctionStmt(Function stmt);
            T VisitIfStmt(If stmt);
            T VisitPrintStmt(Print stmt);
            T VisitVarStmt(Var stmt);
            T VisitReturnStmt(Return stmt);
            T VisitWhileStmt(While stmt);
        }

        public class Block : Stmt
        {
            public Block(IEnumerable<Stmt> statements)
            {
                this.Statements = statements;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitBlockStmt(this);
            }

            public IEnumerable<Stmt> Statements { get; }
        }

        public class Expression : Stmt
        {
            public Expression(Expr expression_)
            {
                this.Expression_ = expression_;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitExpressionStmt(this);
            }

            public Expr Expression_ { get; }
        }

        public class Function : Stmt
        {
            public Function(Token name, List<Token> parameters, List<Stmt> body)
            {
                this.Name = name;
                this.Parameters = parameters;
                this.Body = body;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitFunctionStmt(this);
            }

            public Token Name { get; }
            public List<Token> Parameters { get; }
            public List<Stmt> Body { get; }
        }

        public class If : Stmt
        {
            public If(Expr condition, Stmt thenBranch, Stmt elseBranch)
            {
                this.Condition = condition;
                this.ThenBranch = thenBranch;
                this.ElseBranch = elseBranch;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitIfStmt(this);
            }

            public Expr Condition { get; }
            public Stmt ThenBranch { get; }
            public Stmt ElseBranch { get; }
        }

        public class Print : Stmt
        {
            public Print(Expr expression)
            {
                this.Expression = expression;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitPrintStmt(this);
            }

            public Expr Expression { get; }
        }

        public class Var : Stmt
        {
            public Var(Token name, Expr initializer)
            {
                this.Name = name;
                this.Initializer = initializer;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitVarStmt(this);
            }

            public Token Name { get; }
            public Expr Initializer { get; }
        }

        public class Return : Stmt
        {
            public Return(Token keyword, Expr value)
            {
                this.Keyword = keyword;
                this.Value = value;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitReturnStmt(this);
            }

            public Token Keyword { get; }
            public Expr Value { get; }
        }

        public class While : Stmt
        {
            public While(Expr condition, Stmt body)
            {
                this.Condition = condition;
                this.Body = body;
            }

            public override T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitWhileStmt(this);
            }

            public Expr Condition { get; }
            public Stmt Body { get; }
        }

        public abstract T Accept<T>(IVisitor<T> visitor);
    }
}
